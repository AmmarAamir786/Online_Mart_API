version: '3.8'
name: ammar-mart

x-kong-config:
  &kong-env
  KONG_DATABASE: ${KONG_DATABASE:-postgres} 
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: db
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password

services:
 
  # product-service:
  #   build:
  #     context: ./product-service
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./product-service:/app  # Sync local development directory with the container
  #   depends_on:
  #     - kafka-ui
  #     - broker
  #     # - schema-registry
  #   ports:
  #     - "8011:8011"  # Expose container port right to host port left 

  # product-consumer-service:
  #   build:
  #     context: ./product-consumer-service
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./product-consumer-service:/app  # Sync local development directory with the container
  #   depends_on:
  #     - product_db
  #     - broker
  #     # - schema-registry
  #   ports:
  #     - "8012:8012"  # Expose container port right to host port left 


  # product_db:
  #   image: postgres:latest  # Use the official PostgreSQL image
  #   restart: always
  #   container_name: Product_db_Cont
  #   environment:
  #       - POSTGRES_USER=ammar
  #       - POSTGRES_PASSWORD=my_password
  #       - POSTGRES_DB=product_db
  #   ports:
  #       - '5433:5432'
  #   volumes:
  #       - product_db:/var/lib/postgresql/data
        

  # order-service:
  #   build:
  #     context: ./order-service
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./order-service:/app  # Sync local development directory with the container
  #   depends_on:
  #     - kafka-ui
  #     - broker
  #   ports:
  #     - "8013:8013"  # Expose container port right to host port left

  # order-consumer-service:
  #   build:
  #     context: ./order-consumer-service
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./order-consumer-service:/app  # Sync local development directory with the container
  #   depends_on:
  #     - order_db
  #     - broker
  #     # - schema-registry
  #   ports:
  #     - "8014:8014"  # Expose container port right to host port left  

  # order_db:
  #   image: postgres:latest  # Use the official PostgreSQL image
  #   restart: always
  #   container_name: Order_db_Cont
  #   environment:
  #       - POSTGRES_USER=ammar
  #       - POSTGRES_PASSWORD=my_password
  #       - POSTGRES_DB=order_db
  #   ports:
  #       - '5434:5432'
  #   volumes:
  #       - order_db:/var/lib/postgresql/data


  # inventory-service:
  #   build:
  #     context: ./inventory-service
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./inventory-service:/app  # Sync local development directory with the container
  #   depends_on:
  #     - kafka-ui
  #     - broker
  #     # - schema-registry
  #   ports:
  #     - "8015:8015"  # Expose container port right to host port left 

  # inventory-consumer-service:
  #   build:
  #     context: ./inventory-consumer-service
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./inventory-consumer-service:/app  # Sync local development directory with the container
  #   depends_on:
  #     - inventory_db
  #     - broker
  #     # - schema-registry
  #   ports:
  #     - "8016:8016"  # Expose container port right to host port left 

  # inventory_db:
  #   image: postgres:latest  # Use the official PostgreSQL image
  #   restart: always
  #   container_name: Inventory_db_Cont
  #   environment:
  #       - POSTGRES_USER=ammar
  #       - POSTGRES_PASSWORD=my_password
  #       - POSTGRES_DB=inventory_db
  #   ports:
  #       - '5435:5432'
  #   volumes:
  #       - inventory_db:/var/lib/postgresql/data


  # user-service:
  #   build:
  #     context: ./user-service
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./user-service:/app  # Sync local development directory with the container
  #   depends_on:
  #     - user_db
  #     - broker
  #     # - schema-registry
  #   ports:
  #     - "8017:8017"  # Expose container port right to host port left 

  # user_db:
  #   image: postgres:latest  # Use the official PostgreSQL image
  #   restart: always
  #   container_name: User_db_Cont
  #   environment:
  #       - POSTGRES_USER=ammar
  #       - POSTGRES_PASSWORD=my_password
  #       - POSTGRES_DB=user_db
  #   ports:
  #       - '5436:5432'
  #   volumes:
  #       - user_db:/var/lib/postgresql/data


  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'


  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker

  # schema-registry:
  #   image: confluentinc/cp-schema-registry:6.1.1
  #   depends_on:
  #     - broker
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker:19092
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #     SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081


  db:
    image: postgres:9.5
    profiles: [ "database" ]
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${KONG_PG_DATABASE:-kong}", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    volumes:
      - kong_data:/var/lib/postgresql/data
#===============================================================================================
  kong-migrations-bootstrap:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    profiles: [ "database" ]
    depends_on:
      db:
        condition: service_healthy
    environment:
      <<: *kong-env
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    restart: on-failure
#===============================================================================================
  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations up --vv
    profiles: [ "database" ]
    depends_on:
      kong-migrations-bootstrap:
        condition: service_completed_successfully
    environment:
      <<: *kong-env
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    restart: on-failure
#===============================================================================================
  kong-migrations-finish:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations finish --vv
    profiles: [ "database" ]
    depends_on:
      kong-migrations-up:
        condition: service_completed_successfully
    environment:
      <<: *kong-env
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    restart: on-failure
#===============================================================================================

  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_ADMIN_GUI_LISTEN: "${KONG_ADMIN_GUI_LISTEN:-0.0.0.0:8002}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
    secrets:
      - kong_postgres_password
    ports:
      # The following two environment variables default to an insecure value (0.0.0.0)
      # according to the CIS Security test.
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      # Making them mandatory but undefined, like so would be backwards-breaking:
      # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
      # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
      # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

      - "127.0.0.1:8001:8001/tcp"
      - "127.0.0.1:8444:8444/tcp"
      - "127.0.0.1:8002:8002/tcp"
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      # - ./config:/opt/kong
    security_opt:
      - no-new-privileges

  # gateway-setup:
  #   build:
  #     context: ./kong
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./kong/gateway-startup.sh:/app/gateway-startup.sh
  #   entrypoint: ["/bin/sh", "/app/gateway-startup.sh"]

volumes:
  # product_db:
  #   driver: local
  # order_db:
  #   driver: local
  # inventory_db:
  #   driver: local
  # user_db:
  #   driver: local

  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs

networks:
  default:
    driver: bridge

secrets:
  kong_postgres_password:
    file: ./POSTGRES_PASSWORD

